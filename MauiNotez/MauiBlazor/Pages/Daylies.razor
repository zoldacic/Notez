@page "/daylies"

@using System.Net.Http.Json
@using MauiBlazor.Data;
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Cards
@using Syncfusion.Blazor.Popups
@using TodoSQLite.Data;
@using TodoSQLite.Models;
@using Syncfusion.Blazor.Grids

<SfCard>
<SfGrid DataSource="@items" AllowTextWrap="true" AllowPaging="true">
    <GridColumns>
        <GridColumn Field="@nameof(TodoItem.Name)" HeaderText="Name" Width="190"></GridColumn>
        <GridColumn Field="@nameof(TodoItem.Notes)" HeaderText="Notes" Width="340"></GridColumn>
        <GridColumn HeaderText="Edit">
            <Template>
                @{
                    var item = (context as TodoItem);
                    <div class="image">
                        <SfButton Content="Edit" OnClick="@(x => OpenEditDialogAsync(x, item))"></SfButton>
                        <SfButton Content="Delete" OnClick="@(x => OpenDeleteDialogAsync(x, item))"></SfButton>
                    </div>
                }
            </Template>
        </GridColumn>
    </GridColumns>
</SfGrid>

    <SfButton Content="Add" IconCss="e-icons e-chevron-down-fill" OnClick="@(x => OpenEditDialogAsync(x, null))"></SfButton>
</SfCard>

@if (hasSelectedItem)
{
    <EditItem 
        @ref="editDialog" 
        item="selectedItem" 
        OnItemSaved="@(() => OnEditDialogSubmit())" 
        OnItemSaveCancelled="@(() => OnEditDialogCancel())">
    </EditItem>
}

@* <MudStack>
    <MudDataGrid @ref="mudGrid" Items="@items" Filterable="false" SortMode="@SortMode.None" Groupable="false" ReadOnly=false EditMode="DataGridEditMode.Form">
        <Columns>
            <PropertyColumn Property="x => x.Name" Title="Name" />
            <PropertyColumn Property="x => GetTags(x.ID)" Title="Tags" />
            <TemplateColumn CellClass="d-flex justify-end">
                <CellTemplate>
                    <MudStack Row>
                        <MudButton Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary" @onclick="@(x => OpenEditDialogAsync(x, context.Item))">Edit</MudButton>
                        <MudButton Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary" @onclick="@(x => OpenDeleteDialoGAsync(x, context.Item))">Delete</MudButton>
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
    </MudDataGrid>

    <MudStack AlignItems="AlignItems.End">
        <MudButton @onclick="x => OpenEditDialogAsync(x, null)" Variant="Variant.Filled" Color="Color.Primary">
            Add
        </MudButton>
    </MudStack>
</MudStack> *@

@code {
    private bool hasSelectedItem = false;
    public TodoItem selectedItem;


    public IEnumerable<TodoItem> items;

    // private bool isEditDialogVisible = false;

    // private MudDataGrid<TodoItem> mudGrid;

    private EditItem editDialog;

    private List<Tag> allTags;
    private List<ItemTag> allItemTags;

    protected override async Task OnInitializedAsync()
    {
        await LoadItems();
    }

    protected async Task LoadItems()
    {
        var repo = new TodoItemRepository();
        await repo.Init();
        items = await repo.GetItemsAsync();

        var tagRepo = new TagRepository();
        allTags = await tagRepo.GetTagsAsync();

        var itemTagRepo = new ItemTagRepository();
        allItemTags = await itemTagRepo.GetItemTagsAsync();
    }

    // protected string GetTags(int itemId)
    // {
    //     var itemTags = allItemTags.Where(it => it.ItemId == itemId).ToList();
    //     var tagIds = itemTags.Select(it => it.TagId).ToList();
    //     var tags = allTags.Where(t => tagIds.Any(ti => ti == t.ID)).Select(t => t.Text).ToList();

    //     var tagString = string.Join(", ", tags);
    //     return tagString;
    // }

    private async Task OpenEditDialogAsync(MouseEventArgs args, TodoItem item)
    {
        selectedItem = item;
        hasSelectedItem = true;
        // var parameters = new DialogParameters { };

        // if (item != null)
        // {
        //     parameters = new DialogParameters { ["item"] = item };
        // }

        // var options = new DialogOptions { CloseOnEscapeKey = true };
        //await DialogService.Show<EditItem>("Add item", parameters, options).Result;,
        // editDialog.OpenDialog(item);
        await LoadItems();
    }

    private async Task OpenDeleteDialogAsync(MouseEventArgs args, TodoItem item)
    {
        hasSelectedItem = true;
        // var options = new DialogOptions { CloseOnEscapeKey = true };
        // await DialogService.Show<DeleteItem>("Delete item", parameters, options).Result;
        await LoadItems();
    }

    private void OnEditDialogSubmit()
    {
        hasSelectedItem = false;
    }

    private void OnEditDialogCancel()
    {
        hasSelectedItem = false;
    }
}