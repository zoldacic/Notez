@page "/daylies"

@using System.Net.Http.Json
@using MauiBlazor.Data;
@using TodoSQLite.Data;
@using TodoSQLite.Models;

@inject IDialogService DialogService

<MudStack>
    <MudDataGrid @ref="mudGrid" Items="@items" Filterable="false" SortMode="@SortMode.None" Groupable="false" ReadOnly=false EditMode="DataGridEditMode.Form">
        <Columns>
            <PropertyColumn Property="x => x.Name" Title="Name" />
            <PropertyColumn Property="x => GetTags(x.ID)" Title="Tags" />
            <TemplateColumn CellClass="d-flex justify-end">
                <CellTemplate>
                    <MudStack Row>
                        <MudButton Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary" @onclick="@(x => OpenEditDialogAsync(x, context.Item))">Edit</MudButton>
                        <MudButton Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary" @onclick="@(x => OpenDeleteDialoGAsync(x, context.Item))">Delete</MudButton>
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
    </MudDataGrid>

    <MudStack AlignItems="AlignItems.End">
        <MudButton @onclick="x => OpenEditDialogAsync(x, null)" Variant="Variant.Filled" Color="Color.Primary">
            Add
        </MudButton>
    </MudStack>
</MudStack>

@code {

    public IEnumerable<TodoItem> items;

    private MudDataGrid<TodoItem> mudGrid;

    private List<Tag> allTags;
    private List<ItemTag> allItemTags;

    protected override async Task OnInitializedAsync()
    {
        await LoadItems();
    }

    protected async Task LoadItems()
    {
        var repo = new TodoItemRepository();
        await repo.Init();
        items = await repo.GetItemsAsync();

        var tagRepo = new TagRepository();
        allTags = await tagRepo.GetTagsAsync();

        var itemTagRepo = new ItemTagRepository();
        allItemTags = await itemTagRepo.GetItemTagsAsync();
    }

    protected string GetTags(int itemId)
    {
        var itemTags = allItemTags.Where(it => it.ItemId == itemId).ToList();
        var tagIds = itemTags.Select(it => it.TagId).ToList();
        var tags = allTags.Where(t => tagIds.Any(ti => ti == t.ID)).Select(t => t.Text).ToList();

        var tagString = string.Join(", ", tags);
        return tagString;
    }

    private async Task OpenEditDialogAsync(MouseEventArgs args, TodoItem item)
    {
        var parameters = new DialogParameters { };

        if (item != null)
        {
            parameters = new DialogParameters { ["item"] = item };
        }

        var options = new DialogOptions { CloseOnEscapeKey = true };
        await DialogService.Show<EditItem>("Add item", parameters, options).Result;
        await LoadItems();
    }

    private async Task OpenDeleteDialoGAsync(MouseEventArgs args, TodoItem item)
    {
        var parameters = new DialogParameters { };

        if (item != null)
        {
            parameters = new DialogParameters { ["item"] = item };
        }

        var options = new DialogOptions { CloseOnEscapeKey = true };
        await DialogService.Show<DeleteItem>("Delete item", parameters, options).Result;
        await LoadItems();
    }
}