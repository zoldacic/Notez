@page "/daylies"

@using MauiBlazor.Data;
@using MauiBlazor.Models;
@using Syncfusion.Blazor.DropDowns
@using TodoSQLite.Data;
@using System.Net.Http.Json
@using Syncfusion.Blazor.Buttons;
@using Syncfusion.Blazor.Cards;
@using Syncfusion.Blazor.Popups;
@using Syncfusion.Blazor.Grids;
@using Syncfusion.Blazor.Calendars;

<h2>Filter</h2>

<div style="padding-bottom: 10px">
    <SfCard>

        <TagSelection @ref="tagSelectionRef" item="null" OnTagSelectionChanged="OnFilterChange" />

        <SfTextBox TValue="string?" Placeholder="Text" Input="@OnTextFilterChange" CssClass="e-outline" FloatLabelType="@FloatLabelType.Always"></SfTextBox>

        <SfDatePicker TValue="DateTime?" OnChange="@(() => OnFilterChange())" Placeholder="Date from" CssClass="e-outline" @bind-value="fromDate" FloatLabelType="@FloatLabelType.Always" ShowClearButton="true"></SfDatePicker>
        <SfDatePicker TValue="DateTime?" OnChange="@(() => OnFilterChange())" Placeholder="Date to" CssClass="e-outline" @bind-value="toDate" FloatLabelType="@FloatLabelType.Always" ShowClearButton="true"></SfDatePicker>

        <SfDropDownList TValue="string" TItem="DisplayType" Placeholder="Type of display"></SfDropDownList>

    </SfCard>
</div>

<h2>Search Result</h2>

<SfCard>
    <SfGrid DataSource="@filteredItems" AllowTextWrap="true" AllowPaging="true" AllowSorting="true" AllowMultiSorting="true">
        <GridColumns>
            <GridColumn Field="@nameof(TodoItem.Name)" HeaderText="Name" Width="190"></GridColumn>
            <GridColumn Field="@nameof(TodoItem.Notes)" HeaderText="Notes" Width="340"></GridColumn>
            <GridColumn HeaderText="Tags" HideAtMedia="(min-width: 700px)" Width="190">
                <Template>
                    @{
                        var item = (context as TodoItem);
                        <TagSelection item="item" ShowOnlySelected=true></TagSelection>
                    }
                </Template>
            </GridColumn>
            <GridColumn Field="@nameof(TodoItem.AssignedDate)" HideAtMedia="(min-width: 700px)" HeaderText="Assigned Date" Width="190"></GridColumn>
            <GridColumn HeaderText="" Width="140">
                <Template>
                    @{
                        var item = (context as TodoItem);
                        <div class="image">
                            <SfButton Content="Edit" OnClick="@(x => OpenEditDialog(x, item))"></SfButton>
                            <SfButton Content="Delete" OnClick="@(x => OpenDeleteDialog(x, item))"></SfButton>
                        </div>
                    }
                </Template>
            </GridColumn>
        </GridColumns>
    </SfGrid>

    <SfButton Content="Add" IconCss="e-icons e-chevron-down-fill" OnClick="@(x => OpenEditDialog(x, null))"></SfButton>
</SfCard>

@if (hasSelectedItemForEdit)
{
    <EditItem @ref="editDialog"
              Item="selectedItem"
              OnItemSaved="@(() => OnEditDialogSubmit())"
              OnItemSaveCancelled="@(() => OnEditDialogCancel())">
    </EditItem>
}

@if (hasSelectedItemForDelete)
{
    <DeleteItem @ref="deleteDialog"
              Item="selectedItem"
              OnItemSaved="@(() => OnDeleteDialogSubmit())"
              OnItemSaveCancelled="@(() => OnDeleteDialogCancel())">
    </DeleteItem>
}

@code {
    private TagSelection tagSelectionRef;

    private bool hasSelectedItemForEdit = false;
    private bool hasSelectedItemForDelete = false;

    public TodoItem selectedItem;

    public IEnumerable<TodoItem> items;
    public IEnumerable<TodoItem> filteredItems;

    private EditItem editDialog;
    private DeleteItem deleteDialog;

    private List<Tag> allTags;
    private List<ItemTag> allItemTags;

    private DateTime? fromDate;
    private DateTime? toDate;

    private string? searchText;

    public class DisplayType
    {
        public int ID { get; set; }
        public string Text { get; set; }
    }

    private List<DisplayType> DisplayTypes = new List<DisplayType>()
    {
        new DisplayType() { ID = 1, Text = "Card" },
        new DisplayType() { ID = 2, Text = "List" },
    };

    protected void OnTextFilterChange(InputEventArgs args)
    {
        searchText = args.Value;
        FilterItems();
    }

    protected void OnFilterChange()
    {
        FilterItems();
    }

    private void FilterItems()
    {
        filteredItems = items;

        if (tagSelectionRef.GetSelectedTags().Any())
        {
            var itemTags = allItemTags.Where(it => tagSelectionRef.GetSelectedTags().Any(st => st.ID == it.TagId));
            filteredItems = filteredItems.Where(i => itemTags.Any(it => it.ItemId == i.ID));
        }   

        if (fromDate != null)
        {
            filteredItems = filteredItems.Where(i => i.AssignedDate is not null && i.AssignedDate >= fromDate);
        }

        if (toDate != null)
        {
            filteredItems = filteredItems.Where(i => i.AssignedDate is not null && i.AssignedDate <= toDate);
        }

        if (!string.IsNullOrWhiteSpace(searchText))
        {
            filteredItems = filteredItems.Where(i => (i.Name != null && i.Name.Contains(searchText, StringComparison.CurrentCultureIgnoreCase)) || (i.Notes != null && i.Notes.Contains(searchText, StringComparison.CurrentCultureIgnoreCase))).ToList();
        }

        StateHasChanged();
    }
    
    protected override async Task OnInitializedAsync()
    {
        await LoadItems();
    }

    protected async Task LoadItems()
    {
        var repo = new TodoItemRepository();
        await repo.Init();
        items = await repo.GetItemsAsync();
        filteredItems = items;

        var tagRepo = new TagRepository();
        allTags = await tagRepo.GetTagsAsync();

        var itemTagRepo = new ItemTagRepository();
        allItemTags = await itemTagRepo.GetItemTagsAsync();
    }

    private void OpenEditDialog(MouseEventArgs args, TodoItem item)
    {
        selectedItem = item;
        hasSelectedItemForEdit = true;
    }

    private void OpenDeleteDialog(MouseEventArgs args, TodoItem item)
    {
        selectedItem = item;
        hasSelectedItemForDelete = true;
    }

    private void OnEditDialogSubmit()
    {
        hasSelectedItemForEdit = false;
    }

    private void OnEditDialogCancel()
    {
        hasSelectedItemForEdit = false;
    }

    private void OnDeleteDialogSubmit()
    {
        hasSelectedItemForEdit = false;
    }

    private void OnDeleteDialogCancel()
    {
        hasSelectedItemForEdit = false;
    }
}