@page "/charts"

@using MauiBlazor.Data;
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Calendars
@using TodoSQLite.Data;
@using TodoSQLite.Models;

<SfDatePicker TValue="DateTime?" Placeholder="From date" CssClass="e-outline" Value="fromDate" FloatLabelType="@FloatLabelType.Always" ShowClearButton="true"></SfDatePicker>
<SfDatePicker TValue="DateTime?" Placeholder="To date" CssClass="e-outline" Value="toDate" FloatLabelType="@FloatLabelType.Always" ShowClearButton="true"></SfDatePicker>

<div style="margin-bottom:7px">
    <SfChip Selection="SelectionType.Multiple" CssClass="e-outline" SelectedChips="selectedChips">
        <ChipItems>
            @if (tags != null)
            {
                @foreach (var tag in tags)
                {
                    <ChipItem @ref="chip" Text="@tag.Text"></ChipItem>
                }
            }                    
        </ChipItems>
    </SfChip>
</div>

<SfButton Content="Create graph" IsPrimary="true" OnClick="CreateGraphAsync" />

@code {

    private List<Tag> tags;

    private string[] selectedChips = new string[0];
    private List<ChipItem> chips = new List<ChipItem>();
    private ChipItem chip { set { chips.Add(value); } }

    private DateTime fromDate;
    private DateTime toDate;

    protected override async Task OnInitializedAsync()
    {
        var tagRepo = new TagRepository();
        tags = await tagRepo.GetTagsAsync();

        await base.OnInitializedAsync();
    }

    protected async Task CreateGraphAsync()
    {
        var selectedTags = tags.Where(t => selectedChips.Any(m => m == t.Text)).ToList();
        var selectedTagIds = selectedTags.Any() ? selectedTags.Select(t => t.ID).ToList() : new List<int>();

        var itemTagRepo = new ItemTagRepository();
        var itemTags = (await itemTagRepo.GetItemTagsAsync()).Where(it => selectedTagIds.Any(t => t == it.TagId)).ToList();

        var itemIds = itemTags.Select(it => it.ItemId).ToList();

        var itemRepo = new TodoItemRepository();
        var items = await itemRepo.GetItemsAsync();

        var selectedItems = items.Where(i => i.AssignedDate >= fromDate && i.AssignedDate <= toDate && itemIds.Any(ii => ii == i.ID)).ToList();
    }
}
 