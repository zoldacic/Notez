@page "/import"

@using MauiBlazor.Data;
@using MauiBlazor.Models;
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Cards
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Notifications;
@using Syncfusion.XlsIO;
@using System.Dynamic;
@using System.Data;
@using TodoSQLite.Data;

<h2>File import</h2>

<div style="padding-bottom: 10px">

    <SfCard>
        <SfUploader>
            <UploaderEvents ValueChange="@OnFileUploaded"></UploaderEvents>
        </SfUploader>       

        @if (importItems != null && importItems.Any())
        {
            <SfGrid DataSource="@importItems" AllowTextWrap="true" AllowPaging="true" AllowSorting="true"></SfGrid>
        }

        <SfButton Content="Preview" IconCss="e-icons e-chevron-down-fill" OnClick="@(x => Preview(x))"></SfButton>

        <SfToast ID="toast_default" @ref="toastObj" Title="" Content="@toastContent" Timeout="2000"></SfToast>

@*         @if (items is not null) {
            <h3>@items.Count new items.</h3>
        }
        
        @if (itemsAlreadyExisting is not null)
        {
            <h3>@itemsAlreadyExisting.Count already existing items.</h3>
        } *@
    </SfCard>

</div>

<h2>Import Preview</h2>

<div style="padding-bottom: 10px">

    <SfCard>
        <ItemGrid Items="items"></ItemGrid>

        <SfButton Content="Import" IconCss="e-icons e-chevron-down-fill" OnClick="@(x => Import(x))"></SfButton>
    </SfCard>

</div>

@if (hasSelectedItemForEdit)
{
    <EditItem @ref="editDialog"
              Item="selectedItem"
              OnItemSaved="@(() => OnEditDialogSubmit())"
              OnItemSaveCancelled="@(() => OnEditDialogCancel())">
    </EditItem>
}

@if (hasSelectedItemForDelete)
{
    <DeleteItem @ref="deleteDialog"
                Item="selectedItem"
                OnItemSaved="@(() => OnDeleteDialogSubmit())"
                OnItemSaveCancelled="@(() => OnDeleteDialogCancel())">
    </DeleteItem>
}

@code {
    private List<TodoItem> items;
    private List<TodoItem> itemsAlreadyExisting;

    private string account;

    private bool hasSelectedItemForEdit = false;
    private bool hasSelectedItemForDelete = false;

    private string[] Columns;
    private List<ExpandoObject> importItems;

    private TodoItem selectedItem;

    private EditItem editDialog;
    private DeleteItem deleteDialog;

    private SfToast toastObj;
    private string toastContent;

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            importItems = new List<ExpandoObject>();
        }

        return base.OnAfterRenderAsync(firstRender);
    }

    private async Task OnFileUploaded(UploadChangeEventArgs args)
    {
        foreach (var file in args.Files)
        {
            try
            {
                var path = Path.Combine(FileSystem.Current.CacheDirectory, file.FileInfo.Name) + ".tmp";
                ExcelEngine excelEngine = new ExcelEngine();
                IApplication application = excelEngine.Excel;
                application.DefaultVersion = ExcelVersion.Excel2016;

                //create new filestream into above path
                var openFileStream = File.Create(path);

                //write the uploaded memorystream to file stream
                await file.File.OpenReadStream().CopyToAsync(openFileStream);
                openFileStream.Close();

                //again open the filstream from that path
                var fileStream = File.OpenRead(path);

                //access the workbook from that filtestream
                var workbook = application.Workbooks.Open(fileStream);
                IWorksheet worksheet = workbook.Worksheets[0];

                //get datatable from workbook
                var table = worksheet.ExportDataTable(worksheet.UsedRange, ExcelExportDataTableOptions.ColumnNames);

                //convert to dynamic list and append to Grid.
                GenerateImportItemsFromFile(table);

                StateHasChanged();
            }
            catch (Exception ex)
            {
                throw;
            }
        }
    }

    private void GenerateImportItemsFromFile(DataTable input)
    {
        var accountRow = input.Rows[3];
        account = accountRow[0].ToString();

        importItems.Clear();

        var columnNames = input.Rows[6].ItemArray.Select(i => i.ToString()).ToArray();
        for (var rowNo = 7;rowNo < input.Rows.Count;rowNo++) 
        {
            var importItem = new System.Dynamic.ExpandoObject();
            var row = input.Rows[rowNo];

            foreach (DataColumn column in input.Columns)
            {
                importItem.TryAdd(columnNames[column.Ordinal], row.ItemArray[column.Ordinal]);
            }

            importItems.Add(importItem);
        }
    }

    private async Task Preview(MouseEventArgs args)
    {
        var dynamicItems = importItems.Select(c => (dynamic)c);

        var unsavedItems = dynamicItems.Select(c => new TodoItem()
        {
            Account = account,
            Name = c.Text,
            TransactionAmount = double.Parse(c.Belopp),
            AssignedDate = DateTime.Parse(c.Bokförd),
            TransactionId = c.Verifikationsnummer,
            IsTemporary = true
        }).ToList();

        var itemRepo = new TodoItemRepository();
        await itemRepo.DeleteAllTemporaryItemsAsync();

        var tagRepo = new TagRepository();
        var tag = await tagRepo.GetTagWithValueAsync("Import");

        if (tag is null)
        {
            tag = new Tag() { Text = "Import", Value = "Import" };
            await tagRepo.SaveTagAsync(tag);

            tag = await tagRepo.GetTagWithValueAsync("Import");
        }

        var tags = new List<Tag>() { tag };

        await itemRepo.CreateTemporaryItemsAsync(unsavedItems, tags);

        items = await itemRepo.GetTemporaryItemsAsync();

        toastContent = $"Added {items.Count} items";
        await toastObj.ShowAsync();

        StateHasChanged();
    }

    private async Task Import(MouseEventArgs args)
    {
        var repo = new TodoItemRepository();
        await repo.SetTemporaryItemsPermanentAsync();

        importItems.Clear();
        items.Clear();

        StateHasChanged();
    }

    private void OpenEditDialog(MouseEventArgs args, TodoItem item)
    {
        selectedItem = item;
        hasSelectedItemForEdit = true;
    }

    private void OpenDeleteDialog(MouseEventArgs args, TodoItem item)
    {
        selectedItem = item;
        hasSelectedItemForDelete = true;
    }

    private void OnEditDialogSubmit()
    {
        hasSelectedItemForEdit = false;
        StateHasChanged();
    }

    private void OnEditDialogCancel()
    {
        hasSelectedItemForEdit = false;
    }

    private void OnDeleteDialogSubmit()
    {
        hasSelectedItemForEdit = false;
        StateHasChanged();
    }

    private void OnDeleteDialogCancel()
    {
        hasSelectedItemForEdit = false;
    }
}
