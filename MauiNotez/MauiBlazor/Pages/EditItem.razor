@using MauiBlazor.Models;
@using TodoSQLite.Data;
@using MauiBlazor.Data;
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.Popups
@using TodoSQLite.Data;
@using Syncfusion.Blazor.Inputs

<SfDialog Width="250px" IsModal="true" Visible="true">
    <DialogTemplates>
        <Content> 
            <SfTextBox @bind-Value="@Item.Name" CssClass="e-outline" Placeholder="Name" FloatLabelType="@FloatLabelType.Always"></SfTextBox>

            <TagSelection @ref="tagSelectionRef" item="@Item" />

            <SfTextBox @bind-Value="@Item.Notes" Placeholder="Notes" Multiline=true CssClass="e-outline" FloatLabelType="@FloatLabelType.Always"></SfTextBox>
            <div style="margin-bottom:10px">
                <SfDatePicker TValue="DateTime?" Placeholder="Assigned date" CssClass="e-outline" @bind-Value="assignedDate" FloatLabelType="@FloatLabelType.Always" ShowClearButton="true"></SfDatePicker>
            </div>
            <SfTextBox Type="InputType.Number" Placeholder="Transaction amount" @bind-Value="@transactionAmount" CssClass="e-outline" FloatLabelType="@FloatLabelType.Always"></SfTextBox>

            <DialogButtons>
                <DialogButton Content="Save" IsPrimary="true" OnClick="@Submit" />
                <DialogButton Content="Cancel" OnClick="@Cancel" />
            </DialogButtons>
        </Content>
    </DialogTemplates>
</SfDialog>

@code {

    [Parameter]
    public TodoItem? Item { get; set; }

    [Parameter]
    public EventCallback OnItemSaved { get; set; }

    [Parameter]
    public EventCallback OnItemSaveCancelled { get; set; }

    private TagSelection tagSelectionRef;

    private string transactionAmount;
    private DateTime? assignedDate;    

    protected override async Task OnInitializedAsync()
    {
        if (Item == null)
        {
            Item = new TodoItem();
        }

        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            transactionAmount = Item.TransactionAmount.ToString();
            assignedDate = Item.AssignedDate;
        }

        await base.OnAfterRenderAsync(firstRender);        
    }

    private async Task Submit() {
        Item.TransactionAmount = string.IsNullOrEmpty(transactionAmount) ? null : double.Parse(transactionAmount);
        Item.AssignedDate = assignedDate;

        var repo = new TodoItemRepository();
        await repo.SaveItemAsync(Item, tagSelectionRef.GetSelectedTags());

        await OnItemSaved.InvokeAsync();
    }

    private async Task Cancel()
    {
        await OnItemSaveCancelled.InvokeAsync();
    } 
}