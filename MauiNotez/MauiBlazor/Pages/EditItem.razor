@using MauiBlazor.Data;
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.Popups
@using TodoSQLite.Data;
@using TodoSQLite.Models;
@using Syncfusion.Blazor.Inputs

<SfDialog Width="250px" IsModal="true" Visible="true">
    <DialogTemplates>
        <Content> 
            <SfTextBox @bind-Value="@item.Name" CssClass="e-outline" Placeholder="Name" FloatLabelType="@FloatLabelType.Always"></SfTextBox>

             <SfChip>
                <ChipItems>
                    @if (tags != null)
                    {
                        @foreach (var tag in tags)
                        {
                            <ChipItem @ref="chip" Text="@tag.Text"></ChipItem>
                        }
                    }                    
                </ChipItems>
            </SfChip>
            
            <SfTextBox @bind-Value="@item.Notes" Placeholder="Notes" Multiline=true CssClass="e-outline" FloatLabelType="@FloatLabelType.Always"></SfTextBox>
            <SfDatePicker TValue="DateTime?" Placeholder="Assigned date" Value="assignedDate" FloatLabelType="@FloatLabelType.Always"  ShowClearButton="true"></SfDatePicker>
            <SfTextBox Type="InputType.Number" Placeholder="Transaction amount" @bind-Value="@transactionAmount" CssClass="e-outline" FloatLabelType="@FloatLabelType.Always"></SfTextBox>

            <DialogButtons>
                <DialogButton Content="Save" IsPrimary="true" OnClick="@Submit" />
                <DialogButton Content="Cancel" OnClick="@Cancel" />
            </DialogButtons>
        </Content>
    </DialogTemplates>
</SfDialog>

@code {

    [Parameter]
    public EventCallback OnItemSaved { get; set; }

    [Parameter]
    public EventCallback OnItemSaveCancelled { get; set; }

    [Parameter]
    public TodoItem item { get; set; } = new TodoItem();

    private List<Tag> tags;

    private ChipItem[] selectedChips;
    private List<ChipItem> chips = new List<ChipItem>();
    private ChipItem chip { set { chips.Add(value); } }

    private string transactionAmount;
    private DateTime? assignedDate;    

    protected override async Task OnInitializedAsync()
    {
        var tagRepo = new TagRepository();
        tags = await tagRepo.GetTagsAsync();

        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            transactionAmount = item.TransactionAmount.ToString();
            assignedDate = item.AssignedDate;

            var itemTagsRepo = new ItemTagRepository();
            var itemTags = await itemTagsRepo.GetItemTagsForItemAsync(item.ID);

            var selectedMudChips = new List<ChipItem>();
            foreach (var itemTag in itemTags)
            {
                var tag = tags.FirstOrDefault(t => t.ID == itemTag.TagId);

                if (tag is null)
                {
                    // This ItemTag should not exist - Delete it
                    await itemTagsRepo.DeleteItemTagAsync(itemTag);
                }
                else
                {
                    var mudChip = chips.FirstOrDefault(m => m.Text == tag.Text);
                    selectedMudChips.Add(mudChip);
                }
            }

            selectedChips = selectedMudChips.ToArray();
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);        
    }

    private async Task Submit() {
        var selectedTags = tags.Where(t => selectedChips.Any(s => s.Text == t.Text)).ToList();

        item.TransactionAmount = double.Parse(transactionAmount);
        item.AssignedDate = assignedDate;

        var repo = new TodoItemRepository();
        await repo.SaveItemAsync(item, selectedTags);

        await OnItemSaved.InvokeAsync();
    }

    private async Task Cancel()
    {
        await OnItemSaveCancelled.InvokeAsync();
    } 
}